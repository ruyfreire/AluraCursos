{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","dado","setRequestHeader","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAAaA,W;;;;;;;8BASLC,G,EAAK;AAEL;;;;;AAMA,mBAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAErC,kBAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AAEAD,cAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;;AAEAI,cAAAA,GAAG,CAACG,kBAAJ,GAAyB,YAAM;AAC3B,oBAAGH,GAAG,CAACI,UAAJ,IAAkB,CAArB,EAAuB;AACnB,sBAAGJ,GAAG,CAACK,MAAJ,IAAc,GAAjB,EAAsBP,OAAO,CAACQ,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,YAAf,CAAD,CAAP,CAAtB,KACKT,MAAM,CAACC,GAAG,CAACQ,YAAL,CAAN;AACR;AACJ,eALD;;AAMAR,cAAAA,GAAG,CAACS,IAAJ;AACH,aAbM,CAAP;AAcH;;;+BAEIb,G,EAAKc,I,EAAM;AAEZ;;;;;;;;;AASC,mBAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,cAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiBN,GAAjB,EAAsB,IAAtB;AACAI,cAAAA,GAAG,CAACW,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AACAX,cAAAA,GAAG,CAACG,kBAAJ,GAAyB,YAAM;AAE3B,oBAAIH,GAAG,CAACI,UAAJ,IAAkB,CAAtB,EAAyB;AACrB,sBAAIJ,GAAG,CAACK,MAAJ,IAAc,GAAlB,EACAP,OAAO,CAACQ,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,YAAf,CAAD,CAAP,CADA,KAGAT,MAAM,CAACC,GAAG,CAACQ,YAAL,CAAN;AACA;AACJ,eARJ;;AASGR,cAAAA,GAAG,CAACS,IAAJ,CAASH,IAAI,CAACM,SAAL,CAAeF,IAAf,CAAT,EAdiC,CAcD;AACnC,aAfG,CAAP;AAiBJ","sourcesContent":["export class HttpService {\r\n\r\n    /*\r\n    _handleErrors(res) {\r\n        if(!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n    */\r\n\r\n    get(url) {\r\n\r\n        /*\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n\r\n            */\r\n        return new Promise( (resolve, reject) => {\r\n            \r\n            let xhr = new XMLHttpRequest();\r\n            \r\n            xhr.open('GET', url);\r\n            \r\n            xhr.onreadystatechange = () => {\r\n                if(xhr.readyState == 4){\r\n                    if(xhr.status == 200) resolve(JSON.parse(xhr.responseText));\r\n                    else reject(xhr.responseText);\r\n                }\r\n            }    \r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        /*\r\n        return fetch(url, {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        })\r\n        .then(res => this._handleErrors(res));\r\n        \r\n        */\r\n         return new Promise((resolve, reject) => {\r\n             \r\n             let xhr = new XMLHttpRequest();\r\n             xhr.open(\"POST\", url, true);\r\n             xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n             xhr.onreadystatechange = () => {\r\n                 \r\n                 if (xhr.readyState == 4) {\r\n                     if (xhr.status == 200)\r\n                     resolve(JSON.parse(xhr.responseText));\r\n                     else\r\n                     reject(xhr.responseText);\r\n                    }\r\n                };\r\n                xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n            });\r\n\r\n    }\r\n}"],"file":"HttpService.js"}