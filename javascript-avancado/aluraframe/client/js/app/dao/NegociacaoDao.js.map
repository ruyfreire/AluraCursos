{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","todasNegociacoes","cursor","openCursor","atual","result","dados","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,U,qBAAAA,U;;;+BAEKC,a;AAET,+BAAYC,UAAZ,EAAwB;AAAA;;AAEpB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,aAAd;AACH;;;;mCAEQC,U,EAAY;AAAA;;AAEjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAIC,OAAO,GAAG,KAAI,CAACN,WAAL,CACTO,WADS,CACG,CAAC,KAAI,CAACN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,KAAI,CAACP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,cAAAA,OAAO,CAACI,SAAR,GAAoB,UAAAC,CAAC;AAAA,uBAAIP,OAAO,EAAX;AAAA,eAArB;;AAEAE,cAAAA,OAAO,CAACM,OAAR,GAAkB,UAAAD,CAAC,EAAI;AAEnBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAArB;AACAX,gBAAAA,MAAM,CAAC,2CAAD,CAAN;AACH,eAJD;AAKH,aAdM,CAAP;AAeH;;;uCAEY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kBAAIY,gBAAgB,GAAG,EAAvB;;AAEA,kBAAIC,MAAM,GAAG,MAAI,CAAClB,WAAL,CACRO,WADQ,CACI,CAAC,MAAI,CAACN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,MAAI,CAACP,MAFT,EAGRkB,UAHQ,EAAb;;AAKAD,cAAAA,MAAM,CAACR,SAAP,GAAmB,UAAAC,CAAC,EAAI;AAEpB,oBAAIS,KAAK,GAAGT,CAAC,CAACI,MAAF,CAASM,MAArB;;AACA,oBAAGD,KAAH,EAAU;AACN,sBAAIE,KAAK,GAAGF,KAAK,CAACG,KAAlB;AACAN,kBAAAA,gBAAgB,CAACO,IAAjB,CAAsB,IAAI3B,UAAJ,CAAeyB,KAAK,CAACG,KAArB,EAA4BH,KAAK,CAACI,WAAlC,EAA+CJ,KAAK,CAACK,MAArD,CAAtB;AAEAP,kBAAAA,KAAK,CAACQ,QAAN;AACH,iBALD,MAMK;AACDxB,kBAAAA,OAAO,CAACa,gBAAD,CAAP;AACH;AACJ,eAZD;;AAcAC,cAAAA,MAAM,CAACN,OAAP,GAAiB,UAAAD,CAAC,EAAI;AAClBE,gBAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,MAAF,CAASC,KAArB;AACAX,gBAAAA,MAAM,CAAC,0CAAD,CAAN;AACH,eAHD;AAIH,aA1BM,CAAP;AA2BH;;;uCAGY;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,kBAAIC,OAAO,GAAG,MAAI,CAACN,WAAL,CACTO,WADS,CACG,CAAC,MAAI,CAACN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAI,CAACP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,cAAAA,OAAO,CAACI,SAAR,GAAoB,UAAAC,CAAC;AAAA,uBAAIP,OAAO,CAAC,mCAAD,CAAX;AAAA,eAArB;;AAEAE,cAAAA,OAAO,CAACM,OAAR,GAAkB,UAAAD,CAAC;AAAA,uBAAIN,MAAM,CAAC,gCAAD,CAAV;AAAA,eAAnB;AACH,aAVM,CAAP;AAWH","sourcesContent":["import {Negociacao} from \"../models/Negociacao\";\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = \"negociacoes\";\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = e => resolve();\r\n\r\n            request.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject(\"Erro ao adicionar a negociacão no IndexDB\");\r\n            }\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let todasNegociacoes = [];    \r\n    \r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n    \r\n            cursor.onsuccess = e => {\r\n    \r\n                let atual = e.target.result;\r\n                if(atual) {    \r\n                    let dados = atual.value;\r\n                    todasNegociacoes.push(new Negociacao(dados._data, dados._quantidade, dados._valor));\r\n    \r\n                    atual.continue();\r\n                }\r\n                else {\r\n                    resolve(todasNegociacoes);\r\n                }\r\n            }\r\n    \r\n            cursor.onerror = e => {    \r\n                console.log(e.target.error);\r\n                reject(\"Não foi possível carregar as negociações\");\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    apagaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n            \r\n            request.onsuccess = e => resolve(\"Negociações apagadas com sucesso.\");\r\n\r\n            request.onerror = e => reject(\"Erro ao apagar as negociações.\");\r\n        });\r\n    }\r\n\r\n\r\n}"],"file":"NegociacaoDao.js"}